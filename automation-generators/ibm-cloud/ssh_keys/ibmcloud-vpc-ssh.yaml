---
- name: Retrieve SSH key if already in the vault
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ ssh_key_item.name }}-ssh-key"
    secret_group: "{{ environment_name }}" 

- set_fact:
    ssh_private_key_value: "{{ secret_value }}"

- fail:
    msg: "SSH key secret {{ ssh_key_item.name }}-ssh-key not found in vault and the ssh_key is not managed"
  when: 'not ssh_key_item.managed | default(False) | bool and ssh_private_key_value == ""'

- name: Create temporary directory to hold SSH keys
  tempfile:
    state: directory
    suffix: _ssh
  when: 'ssh_key_item.managed | default(False) | bool and ssh_private_key_value == ""'
  register: ssh_tempdir

- name: Create SSH key if not already in the vault and managed
  community.crypto.openssh_keypair:
    path: "{{ ssh_tempdir.path }}/{{ ssh_key_item.name }}"
    type: rsa
    comment: "provision-key for {{ssh_key_item.name}}"
  when: 'ssh_key_item.managed | default(False) | bool and ssh_private_key_value == ""'

- name: Show SSH key file name
  debug:
    msg: "{{ ssh_tempdir.path }}/{{ ssh_key_item.name }}"
  when: 'ssh_key_item.managed | default(False) | bool and ssh_private_key_value == ""'

- name: Store SSH private key {{ ssh_key_item.name }} in vault
  include_role:
    name: vault-set-secret
  vars:
    secret_name: "{{ ssh_key_item.name }}-ssh-key"
    secret_description: "Managed private SSH key for environment {{ environment_name }}"
    secret_payload: "{{lookup('file', ssh_tempdir.path + '/' + ssh_key_item.name) }}"
    secret_group: "{{ environment_name }}"
  when: 'ssh_key_item.managed | default(False) | bool and ssh_private_key_value == ""'

# Public SSH key must match its private counterpart; therefore always store the public
# key if the private key was (re-)generated
- name: Store SSH public key {{ ssh_key_item.name }} in vault
  include_role:
    name: vault-set-secret
  vars:
    secret_name: "{{ ssh_key_item.name }}-ssh-pub-key"
    secret_description: "Managed public SSH key for environment {{ environment_name }}"
    secret_payload: "{{lookup('file', ssh_tempdir.path + '/' + ssh_key_item.name + '.pub') }}"
    secret_group: "{{ environment_name }}"
  when: 'ssh_key_item.managed | default(False) | bool and ssh_private_key_value == ""'

- name: Delete temporary SSH key directory
  file:
    path: "{{ ssh_tempdir.path }}"
    state: absent
  when: 'ssh_key_item.managed | default(False) | bool and ssh_private_key_value == ""'

- name: Retrieve SSH public key from the vault
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "{{ ssh_key_item.name }}-ssh-pub-key"
    secret_group: "{{ environment_name }}"

- name: Set SSH public key fact to be used in generator
  set_fact:
    "{{ ssh_key_item.name | replace('-','_') }}_ssh_pub_key": "{{ secret_value }}"

- fail:
    msg: "SSH public key secret {{ ssh_key_item.name }}-ssh-pub-key not found in vault and the ssh_key is not managed"
  when: 'not ssh_key_item.managed | default(False) | bool and secret_value  == ""'