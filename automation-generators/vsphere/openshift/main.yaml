---
- name: "Start {{generator.name}} generator"
  debug:
    msg: 'from {{generator.name}} in {{generator.path}} attributes: {{generator.attributes}}'

- name: Show generator
  debug:
    var: generator

- fail:
    msg: "vsphere configuration was not found."
  when: all_config.vsphere is not defined
  
- set_fact:
    _vsphere_config: "{{ all_config.vsphere | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ generator.attributes.vsphere_name }}']

- fail:
    msg: "vm_definition configuration was not found."
  when: all_config.vm_definition is not defined

- set_fact:
    _control_plane_vm_config: "{{ all_config.vm_definition | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ generator.attributes.control_plane_vm_definition }}']

- set_fact:
    _compute_vm_config: "{{ all_config.vm_definition | json_query(query) | first | default({}) }}"
  vars:
    query: >-
      [?name=='{{ generator.attributes.compute_vm_definition }}']

- name: Fail if the vm_definition object was not found
  fail:
    msg: "vm_definition {{ generator.attributes.compute_vm_definition }} was not found"
  when: _compute_vm_config == {}

- name: Retrieve vSphere user
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "vsphere-user"
    secret_group: "{{ environment_name }}" 
    _p_secret_variable: _vsphere_user

- name: Retrieve vSphere password
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "vsphere-password"
    secret_group: "{{ environment_name }}"
    _p_secret_variable: _vsphere_password

- name: Retrieve pull secret from vault
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "ocp-pullsecret"
    secret_group: "{{ environment_name }}" 
    secret_file: /tmp/ocp_pullsecret.json

- name: Retrieve SSH public key from the vault
  include_role: 
    name: vault-get-secret
  vars:
    secret_name: "ocp-ssh-pub-key"
    secret_group: "{{ environment_name }}"
    _p_secret_variable: _ocp_ssh_pub_key

- name: Make sure that directory {{ PATH_TO_OUTPUT_DIR }}/{{ generator.attributes.name }} exists
  file:
    path: "{{ PATH_TO_OUTPUT_DIR }}/{{ generator.attributes.name }}"
    state: directory

- name: Generate instance of "{{generator.name}}" in {{ PATH_TO_OUTPUT_DIR }}
  template:
    src: '../templates/main.tf.j2'
    dest: '{{ PATH_TO_OUTPUT_DIR }}/{{ generator.attributes.name }}/install-config.yaml'

- name: Store the install-config.yaml file as secret {{ generator.name }}-install-config-yaml
  include_role:
    name: vault-set-secret
  vars:
    secret_name: "{{ generator.name }}-install-config-yaml"
    secret_group: "{{ environment_name }}"
    secret_file: "{{ PATH_TO_OUTPUT_DIR }}/{{ generator.attributes.name }}/install-config.yaml"