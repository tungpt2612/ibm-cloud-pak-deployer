---
- name: Validate if project {{ _p_openshift_monitoring.grafana_project }} exists
  shell: |
    oc get projects | grep ^{{ _p_openshift_monitoring.grafana_project }}[[:space:]] | wc -l
  register: _grafana_project_exists

- when: _grafana_project_exists.stdout == "0"
  block:

    - name: Create OpenShift project {{ _p_openshift_monitoring.grafana_project }} if it does not exists
      shell: |
        oc new-project {{ _p_openshift_monitoring.grafana_project }}

    - name: Generate yaml for grafana operator group
      template:
        src: grafana-operatorgroup.j2
        dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-operatorgroup.yaml"
    - name: Create grafana operatorgroup
      shell: |
        oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-operatorgroup.yaml

    - name: Generate yaml for grafana subscription
      template:
        src: grafana-subscription.j2
        dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-subscription.yaml"
    - name: Create grafana operator
      shell: |
        oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-subscription.yaml

    # Wait until subscription has been successfully created
    - name: Wait until Grafana CSV has status Succeeded
      shell: |
        oc get csv -n {{ _p_openshift_monitoring.grafana_project }} \
          -l operators.coreos.com/grafana-operator.{{ _p_openshift_monitoring.grafana_project }} \
          --no-headers \
          -o custom-columns='name:metadata.name,phase:status.phase' | \
          grep -i succeeded | wc -l
      register: _grafana_csv_status
      retries: 30
      delay: 30
      until: _grafana_csv_status.stdout == "1"
      vars:
        ansible_callback_diy_runner_retry_msg: >-
          {%- set result = ansible_callback_diy.result.output -%}
          {%- set retries_left = result.retries - result.attempts -%}
          Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

    # Create Grafana resource
    - name: Generate yaml for Grafana instance
      template:
        src: grafana-cr.j2
        dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-cr.yaml"
    - name: Create Grafana instance
      shell: |
        oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-cr.yaml

    # Get the prometheus-k8s-htpasswd
    - name: Get the prometheus-k8s-htpasswd
      shell: |
        oc get secret -n openshift-monitoring prometheus-k8s-htpasswd \
        -o jsonpath='{.data.auth}' | base64 -d > {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-htpasswd
    - name: Add the grafana-user to htpasswd
      shell: |
        echo >> {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-htpasswd && \
        htpasswd -s -b {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-htpasswd grafana-user pAssW0rd
    - name: Patch the prometheus-k8s-htpasswd
      shell: |
        oc patch secret -n openshift-monitoring prometheus-k8s-htpasswd -p "{\"data\":{\"auth\":\"$(base64 -w0 {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-htpasswd)\"}}"
    - name: Restart the prometheus pods
      shell: |
        oc delete pod -n openshift-monitoring -l app=prometheus
    - name: Wait for Prometheus pods to restart
      shell: |
        oc wait -n openshift-monitoring --for=condition=Ready pod -l app.kubernetes.io/name=prometheus --timeout=240s
    - name: Delete the prometheus-k8s-htpasswd
      file:
        path: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-htpasswd"
        state: absent
      
    # Create Grafana datasource
    - name: Generate yaml for Grafana datasource instance
      template:
        src: grafana-datasource-cr.j2
        dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-datasource-cr.yaml"
    - name: Create Grafana DataSource instance
      shell: |
        oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-grafana-datasource-cr.yaml