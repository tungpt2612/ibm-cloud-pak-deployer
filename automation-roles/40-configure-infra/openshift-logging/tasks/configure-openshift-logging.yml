---

- block: 
  - name: Generate yaml for openshift-oeprators-redhat namespace for ElasticSearch
    template:
      src: openshift-operators-redhat-namespace.j2
      dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-operators-redhat-namespace.yaml"
  - name: Create openshift-operators-redhat namespace
    shell: |
      oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-operators-redhat-namespace.yaml

  - name: Generate yaml for operators-redhat operator group for ElasticSearch
    template:
      src: openshift-operators-redhat-operatorgroup.j2
      dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-operators-redhat-operatorgroup.yaml"
  - name: Create openshift-operators-redhat operatorgroup
    shell: |
      oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-operators-redhat-operatorgroup.yaml

  - name: Generate yaml for OpenShift ElasticSearch subscription
    template:
      src: openshift-operators-elasticsearch-subscription.j2
      dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-operators-elasticsearch-subscription.yaml"
  - name: Create OpenShift elasticsearch operator
    shell: |
      oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-operators-elasticsearch-subscription.yaml

  # Wait until subscription has been successfully created
  - name: Wait until OpenShift ElasticSearch CSV has status Succeeded
    shell: |
      oc get csv -n openshift-operators-redhat \
        -l operators.coreos.com/elasticsearch-operator.openshift-operators-redhat \
        --no-headers \
        -o custom-columns='name:metadata.name,phase:status.phase' | \
        grep -i succeeded | wc -l
    register: _openshift_elasticsearch_csv_status
    retries: 30
    delay: 30
    until: _openshift_elasticsearch_csv_status.stdout == "1"
    vars:
      ansible_callback_diy_runner_retry_msg: >-
        {%- set result = ansible_callback_diy.result.output -%}
        {%- set retries_left = result.retries - result.attempts -%}
        Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

  when: (_p_openshift_logging.configure_es_log_store | default(False) | bool)

- name: Generate yaml for openshift-logging namespace
  template:
    src: openshift-logging-namespace.j2
    dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-logging-namespace.yaml"
- name: Create openshift-logging namespace
  shell: |
    oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-logging-namespace.yaml

- name: Generate yaml for cluster logging operator group
  template:
    src: openshift-logging-operatorgroup.j2
    dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-logging-operatorgroup.yaml"
- name: Create openshift-logging operatorgroup
  shell: |
    oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-logging-operatorgroup.yaml

- name: Generate yaml for OpenShift logging subscription
  template:
    src: openshift-logging-subscription.j2
    dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-logging-subscription.yaml"
- name: Create openshift-logging operator
  shell: |
    oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-logging-subscription.yaml

# Wait until subscription has been successfully created
- name: Wait until OpenShift logging CSV has status Succeeded
  shell: |
    oc get csv -n openshift-logging \
      -l operators.coreos.com/cluster-logging.openshift-logging \
      --no-headers \
      -o custom-columns='name:metadata.name,phase:status.phase' | \
      grep -i succeeded | wc -l
  register: _openshift_logging_csv_status
  retries: 30
  delay: 30
  until: _openshift_logging_csv_status.stdout == "1"
  vars:
    ansible_callback_diy_runner_retry_msg: >-
      {%- set result = ansible_callback_diy.result.output -%}
      {%- set retries_left = result.retries - result.attempts -%}
      Retrying: {{ ansible_callback_diy.task.name }} ({{ retries_left }} Retries left) ...

# Create ClusterLogging resource
- name: Generate yaml for ClusterLogging instance
  template:
    src: openshift-clusterlogging-cr.j2
    dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-clusterlogging-cr.yaml"

- name: Create ClusterLogging instance
  shell: |
    oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-clusterlogging-cr.yaml

# Create secrets for output(s)
- name: Create logging output secrets
  include_tasks: configure-logging-output-secrets.yml
  loop: "{{ _p_openshift_logging.logging_output | default([]) }}"
  loop_control:
    loop_var: _current_logging_output

- name: Generate yaml for ClusterLogForwarder instance
  template:
    src: openshift-clusterlogforwarder-cr.j2
    dest: "{{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-clusterlogforwarder-cr.yaml"

- name: Get current ClusterLogForwarder 'instance', if it exists
  shell: |
    oc get ClusterLogForwarder -n openshift-logging | grep '^instance[[:space:]]' | wc -l
  register: _current_clf_instance

- name: Delete existing ClusterLogForwarder 'instance' if it exists
  shell: |
    oc delete ClusterLogForwarder instance -n openshift-logging
  when: _current_clf_instance.stdout == "1"

- name: Create ClusterLogForwarder instance
  shell: |
    oc apply -f {{ status_dir }}/openshift/{{ current_openshift_cluster.name }}-openshift-clusterlogforwarder-cr.yaml